{"version":3,"sources":["components/like_button/LikeButton.jsx","components/like_button/state/LikeActions.js","components/posts/Post.jsx","components/common/api.js","components/App.jsx","components/posts/state/PostActions.js","components/like_button/state/LikeReducer.js","components/posts/state/PostsReducer.js","components/common/state/RootReducer.js","components/common/state/store.js","index.js"],"names":["LikeButton","props","dispatch","useDispatch","date","liked","useSelector","state","likes","className","onClick","payload","getState","a","type","localStorage","setItem","JSON","stringify","unLike","title","PhotoCard","post","useState","visible","setVisible","expanded","setExpanded","toggleExpanded","partialVisibility","onChange","isVisible","Row","Col","xs","md","dayjs","format","maxDelay","delayMap","at","delay","typing","fixed","_","truncate","explanation","length","separator","omission","href","style","display","src","thumbnail_url","url","alt","copyright","hdurl","rel","target","get","page","axios","req","data","App","posts","initialPostsLoaded","loadingMore","time","setTime","useEffect","startDate","API","savedLikes","parse","getItem","console","log","error","interval","setInterval","clearInterval","Container","fluid","map","Button","requestEndDate","subtract","requestStartDate","initialState","rootReducer","combineReducers","action","middleWare","compose","applyMiddleware","thunk","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.736d0cf9.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport './LikeButton.scss';\nimport { like, unLike } from './state/LikeActions';\n\nexport default function LikeButton(props) {\n    let dispatch = useDispatch();\n    let { date } = props;\n    let liked = useSelector((state) => state.likes[date]);\n\n    function toggleLiked() {\n        if (!liked) dispatch(like(date));\n        else dispatch(unLike(date));\n    }\n    return (\n        <div className=\"like-btn-container\">\n            <button\n                aria-label={(liked ? 'un-like' : 'like')}\n                className={'like-button ' + (liked ? 'liked' : 'not-liked')}\n                onClick={toggleLiked}>\n                <i aria-hidden='true' title={(liked ? 'un-like this post' : 'like this post')}className=\"fas fa-heart\"></i>\n            </button>\n        </div>\n    );\n}\n","export const like = (payload) => {\n    return async (dispatch, getState) => {\n        dispatch({\n            type: 'LIKES/LIKE',\n            payload: payload,\n        });\n        let likes = getState().likes;\n        localStorage.setItem('likes', JSON.stringify({ ...likes, [payload]: true }));\n    };\n};\n\nexport const unLike = (payload) => {\n    return async (dispatch, getState) => {\n        dispatch({\n            type: 'LIKES/UNLIKE',\n            payload: payload,\n        });\n        let likes = getState().likes;\n        localStorage.setItem('likes', JSON.stringify({ ...likes, [payload]: false }));\n    };\n};\n\nexport const getSavedLikes = () => {\n    return async (dispatch, getState) => {\n        try {\n            let savedLikes = JSON.parse(localStorage.getItem('likes'));\n            console.log(savedLikes);\n            dispatch({\n                type: 'LIKES/SET',\n                payload: savedLikes,\n            });\n        } catch (error) {\n            console.log(error);\n        }\n    };\n};\n","import { useState } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport TypeWriter from 'react-typewriter';\nimport VisibilitySensor from 'react-visibility-sensor';\nimport dayjs from 'dayjs';\nimport LikeButton from '../like_button/LikeButton';\nimport './Post.scss';\nimport _ from 'lodash';\n\nexport default function PhotoCard(props) {\n    let { post } = props;\n    let [visible, setVisible] = useState(false);\n    let [expanded, setExpanded] = useState(false);\n\n    const visibilityChangeHandler = (isVisible) => {\n        if (visible) return;\n        setVisible(isVisible);\n    };\n    const toggleExpanded = () => {\n        setExpanded(!expanded);\n    };\n    \n    return (\n        <VisibilitySensor partialVisibility onChange={visibilityChangeHandler}>\n            <div className=\"image-container\">\n                <LikeButton date={post.date} />\n                <Row>\n                    <Col xs={12} md={4} className=\"text-container\">\n                        <h5>\n                            <em>{dayjs(post.date).format('MMMM DD, YYYY')}</em>\n                        </h5>\n                        {visible && !expanded && (\n                            <TypeWriter\n                                maxDelay={40}\n                                delayMap={[{ at: /(\\.)/, delay: 300 }]}\n                                typing={1}\n                                fixed={true}>\n                                <span>\n                                    {_.truncate(post.explanation, {\n                                        length: 350,\n                                        separator: ' ',\n                                        omission: ' ',\n                                    })}\n                                    <button className=\"link\" onClick={toggleExpanded} href=\"#\">\n                                        ...Read More\n                                    </button>\n                                </span>\n                            </TypeWriter>\n                        )}\n                        {visible && expanded && (\n                            <span>\n                                {post.explanation}{' '}\n                                <button className=\"link\" onClick={toggleExpanded} href=\"#\">\n                                    ...Show Less\n                                </button>\n                            </span>\n                        )}\n                    </Col>\n                    <Col xs={12} md={8}>\n                        <img\n                            style={{ display: 'inline' }}\n                            src={post.thumbnail_url || post.url}\n                            alt={post.title}\n                        />\n                        <small>\n                            {`image copyright ${post.copyright}`}{' '}\n                            {post.hdurl && (\n                                <a href={post.hdurl} rel='noreferrer' target=\"_blank\">\n                                    full size image\n                                </a>\n                            )}\n                        </small>\n                    </Col>\n                </Row>\n            </div>\n        </VisibilitySensor>\n    );\n}\n","import axios from \"axios\";\n\nexport async function get(url, page){\n    let req = await axios.get(url)\n    return req.data\n}","import Container from 'react-bootstrap/Container';\nimport 'components/main.scss';\nimport { useEffect, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport dayjs from 'dayjs';\nimport Post from 'components/posts/Post';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { getInitialPosts, getMorePosts } from './posts/state/PostActions';\nimport { getSavedLikes } from './like_button/state/LikeActions.js';\n\nexport default function App() {\n    const dispatch = useDispatch();\n    let posts = useSelector((state) => state.posts.data);\n    let initialPostsLoaded = useSelector((state) => state.posts.initialPostsLoaded);\n    let loadingMore = useSelector((state) => state.posts.loadingMore);\n    let [time, setTime] = useState(dayjs());\n\n    useEffect(() => {\n        dispatch(getInitialPosts());\n        dispatch(getSavedLikes());\n    }, []);\n\n    useEffect(() => {\n        let interval = setInterval(() => {\n            setTime(dayjs());\n        }, 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    return (\n        <Container fluid>\n            <header>\n                <h1 className=\"title\">NASA DAILY BRIEF</h1>\n                <h1 className=\"time\">{time.format('h:mm:ss')}</h1>\n            </header>\n            <main>\n                {!initialPostsLoaded && <i className=\"fas fa-atom fa-spin loading-icon\"></i>}\n                {initialPostsLoaded &&\n                    posts.map((post) => {\n                        return <Post key={post.date} post={post} />;\n                    })}\n                {initialPostsLoaded && (\n                        <Button\n                            className=\"load-more-button\"\n                            onClick={() => dispatch(getMorePosts())}>\n                            {loadingMore ? 'Loading...' : 'Load More'}\n                        </Button>\n                )}\n            </main>\n            {initialPostsLoaded && (\n                <footer>Content Courtesy of NASA APOD API • Copyright 2021 James Bakker</footer>\n            )}\n        </Container>\n    );\n}\n","import * as API from 'components/common/api.js';\nimport dayjs from 'dayjs';\n\nexport const getInitialPosts = () => {\n    return async (dispatch, getState) => {\n        let startDate = getState().posts.startDate;\n        let posts = await API.get(\n            `/posts/?end_date=${dayjs().format('YYYY-MM-DD')}&start_date=${startDate.format(\n                'YYYY-MM-DD'\n            )}`\n        );\n        dispatch({\n            type: 'POSTS/INSERT',\n            payload: posts,\n        });\n        dispatch({ type: 'POSTS/SET_LOADED' });\n    };\n};\n\nexport const getMorePosts = () => {\n    return async (dispatch, getState) => {\n        let requestEndDate = getState().posts.startDate.subtract(1, 'day');\n        let requestStartDate = requestEndDate.subtract(4, 'day');\n        dispatch({\n            type: 'POSTS/SET_LOADING_MORE'\n        })\n        let posts = await API.get(\n            `/posts/?end_date=${requestEndDate.format(\n                'YYYY-MM-DD'\n            )}&start_date=${requestStartDate.format('YYYY-MM-DD')}`\n        );\n        dispatch({\n            type: 'POSTS/SET_START_DATE',\n            payload: requestStartDate\n        })\n        dispatch({\n            type: 'POSTS/INSERT',\n            payload: posts,\n        });\n        dispatch({ type: 'POSTS/SET_MORE_LOADED' });\n    };\n};","const initialState = {}\n\nexport default function likeReducer(state = initialState, action){\n    switch(action.type){\n        case 'LIKES/LIKE':\n            return {...state, [action.payload]: true};\n        case 'LIKES/UNLIKE':\n            return {...state, [action.payload]: false};\n        case 'LIKES/SET':\n            return {...action.payload}\n        default:\n            return {...state };\n    }\n}","import dayjs from 'dayjs';\n\nconst initialState = { \n    startDate: dayjs().subtract(4, 'day'), \n    initialPostsLoaded: false,\n    loadingMore: false,\n    data: [] \n};\n\nexport default function postsReducer(state = initialState, action) {\n    switch (action.type) {\n        case 'POSTS/INSERT':\n            return {...state, data: [...state.data, ...action.payload]};\n        case 'POSTS/SET_LOADED':\n            return {...state, initialPostsLoaded: true}\n        case 'POSTS/SET_MORE_LOADED':\n            return {...state, loadingMore: false}\n        case 'POSTS/SET_LOADING_MORE':\n            return {...state, loadingMore: true}\n        case 'POSTS/SET_START_DATE':\n            return {...state, startDate: action.payload}\n        default:\n            return {...state};\n    }\n}","import {combineReducers} from 'redux'\nimport likeReducer from 'components/like_button/state/LikeReducer'\nimport postsReducer from 'components/posts/state/PostsReducer'\n\n\nconst rootReducer = combineReducers({\n    likes: likeReducer,\n    posts: postsReducer\n})\n\nexport default rootReducer","import { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './RootReducer.js';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst middleWare = compose(applyMiddleware(thunk));\n\nconst store = createStore(rootReducer, composeWithDevTools(middleWare));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.jsx';\nimport { Provider } from 'react-redux'\nimport store from 'components/common/state/store.js'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}