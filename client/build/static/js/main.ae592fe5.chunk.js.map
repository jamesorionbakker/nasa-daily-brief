{"version":3,"sources":["api.js","like_button/LikeButton.jsx","like_button/state/LikeActions.js","posts/Post.jsx","posts/state/PostActions.js","App.jsx","like_button/state/LikeReducer.js","posts/state/PostsReducer.js","state/RootReducer.js","state/store.js","index.js"],"names":["get","url","page","a","console","log","axios","req","data","LikeButton","props","dispatch","useDispatch","date","liked","useSelector","state","likes","className","onClick","payload","getState","type","localStorage","setItem","JSON","stringify","unLike","title","PhotoCard","post","useState","visible","setVisible","expanded","setExpanded","toggleExpanded","partialVisibility","onChange","isVisible","Row","Col","xs","md","dayjs","format","maxDelay","delayMap","at","delay","typing","fixed","_","truncate","explanation","length","separator","omission","href","style","display","src","thumbnail_url","alt","copyright","hdurl","target","getMorePosts","requestEndDate","posts","startDate","subtract","requestStartDate","API","App","initialPostsLoaded","loadingMore","time","setTime","useEffect","savedLikes","parse","getItem","error","interval","setInterval","clearInterval","Container","fluid","map","Button","initialState","rootReducer","combineReducers","action","middleWare","compose","applyMiddleware","thunk","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae592fe5.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport async function get(url, page){\n    console.log('querying...')\n    let req = await axios.get(url)\n    return req.data\n}","import { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport './LikeButton.scss';\nimport { like, unLike } from './state/LikeActions';\n\nexport default function LikeButton(props) {\n    let dispatch = useDispatch();\n    let { date } = props;\n    let liked = useSelector((state) => state.likes[date]);\n\n    function toggleLiked() {\n        if (!liked) dispatch(like(date));\n        else dispatch(unLike(date));\n    }\n    return (\n        <div className=\"like-btn-container\">\n            <button\n                aria-label={(liked ? 'un-like' : 'like')}\n                className={'like-button ' + (liked ? 'liked' : 'not-liked')}\n                onClick={toggleLiked}>\n                <i aria-hidden='true' title={(liked ? 'un-like this post' : 'like this post')}className=\"fas fa-heart\"></i>\n            </button>\n        </div>\n    );\n}\n","export const like = (payload) => {\n    return async (dispatch, getState) => {\n        dispatch({\n            type: 'LIKES/LIKE',\n            payload: payload,\n        });\n        let likes = getState().likes;\n        localStorage.setItem('likes', JSON.stringify({ ...likes, [payload]: true }));\n    };\n};\n\nexport const unLike = (payload) => {\n    return async (dispatch, getState) => {\n        dispatch({\n            type: 'LIKES/UNLIKE',\n            payload: payload,\n        });\n        let likes = getState().likes;\n        localStorage.setItem('likes', JSON.stringify({ ...likes, [payload]: false }));\n    };\n};\n\nexport const getSavedLikes = () => {\n    return async (dispatch, getState) => {\n        try {\n            let savedLikes = JSON.parse(localStorage.getItem('likes'));\n            console.log(savedLikes);\n            dispatch({\n                type: 'LIKES/SET',\n                payload: savedLikes,\n            });\n        } catch (error) {\n            console.log(error);\n        }\n    };\n};\n","import { useState } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport TypeWriter from 'react-typewriter';\nimport VisibilitySensor from 'react-visibility-sensor';\nimport dayjs from 'dayjs';\nimport LikeButton from '../like_button/LikeButton';\nimport './Post.scss';\nimport _ from 'lodash';\n\nexport default function PhotoCard(props) {\n    let { post } = props;\n    let [visible, setVisible] = useState(false);\n    let [expanded, setExpanded] = useState(false);\n\n    const visibilityChangeHandler = (isVisible) => {\n        if (visible) return;\n        setVisible(isVisible);\n    };\n\n    const toggleExpanded = () => {\n        setExpanded(!expanded);\n    };\n    return (\n        <VisibilitySensor partialVisibility onChange={visibilityChangeHandler}>\n            <div className=\"image-container\">\n                <LikeButton date={post.date} />\n                <Row>\n                    <Col xs={12} md={4} className=\"text-container\">\n                        <h5>\n                            <em>{dayjs(post.date).format('MMMM DD, YYYY')}</em>\n                        </h5>\n\n                        {\n                            visible && !expanded && (\n                                <TypeWriter maxDelay={40} delayMap={[{at: /(\\.)/, delay: 300}]} typing={1} fixed={true}>\n                                    <span>\n                                        {_.truncate(post.explanation, {\n                                            length: 350,\n                                            separator: ' ',\n                                            omission: ' ',\n                                        })}\n                                        <button className=\"link\" onClick={toggleExpanded} href=\"#\">\n                                            ...Read More\n                                        </button>\n                                    </span>\n                                </TypeWriter>\n                            )\n                            // <TypeWriter typing={1} fixed={true}>\n                            //     {post.explanation.substring(0, 400) + '...'}\n                            // </TypeWriter>\n                        }\n                        {\n                            visible && expanded && (\n                                <span>\n                                    {post.explanation}{' '}\n                                    <button className=\"link\" onClick={toggleExpanded} href=\"#\">\n                                        ...Show Less\n                                    </button>\n                                </span>\n                            )\n                            // <TypeWriter typing={1} fixed={true}>\n                            //     {post.explanation.substring(0, 400) + '...'}\n                            // </TypeWriter>\n                        }\n                        \n                    </Col>\n                    <Col xs={12} md={8}>\n                        <img\n                            style={{ display: 'inline' }}\n                            src={post.thumbnail_url || post.url}\n                            alt={post.title}\n                        />\n                        <small>{`image copyright ${post.copyright}`} {post.hdurl && <a href={post.hdurl} target=\"_blank\">full size image</a>}</small>\n                    </Col>\n                </Row>\n            </div>\n        </VisibilitySensor>\n    );\n}\n","import * as API from '../../api.js';\nimport dayjs from 'dayjs';\n\nexport const getInitialPosts = () => {\n    return async (dispatch, getState) => {\n        let startDate = getState().posts.startDate;\n        let posts = await API.get(\n            `/images/?end_date=${dayjs().format('YYYY-MM-DD')}&start_date=${startDate.format(\n                'YYYY-MM-DD'\n            )}`\n        );\n        dispatch({\n            type: 'POSTS/INSERT',\n            payload: posts,\n        });\n        dispatch({ type: 'POSTS/SET_LOADED' });\n    };\n};\n\nexport const getMorePosts = () => {\n    return async (dispatch, getState) => {\n        let requestEndDate = getState().posts.startDate.subtract(1, 'day');\n        let requestStartDate = requestEndDate.subtract(4, 'day');\n        dispatch({\n            type: 'POSTS/SET_LOADING_MORE'\n        })\n        let posts = await API.get(\n            `/images/?end_date=${requestEndDate.format(\n                'YYYY-MM-DD'\n            )}&start_date=${requestStartDate.format('YYYY-MM-DD')}`\n        );\n\n        dispatch({\n            type: 'POSTS/SET_START_DATE',\n            payload: requestStartDate\n        })\n        dispatch({\n            type: 'POSTS/INSERT',\n            payload: posts,\n        });\n        dispatch({ type: 'POSTS/SET_MORE_LOADED' });\n    };\n};","import Container from 'react-bootstrap/Container';\nimport './app.scss';\nimport * as API from './api.js';\nimport { useEffect, useState } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport dayjs from 'dayjs';\nimport Post from './posts/Post';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { getInitialPosts, getMorePosts } from './posts/state/PostActions';\nimport { getSavedLikes } from './like_button/state/LikeActions.js';\nimport TypeWriter from 'react-typewriter';\n\nexport default function App() {\n    const dispatch = useDispatch();\n    let posts = useSelector((state) => state.posts.data);\n    let initialPostsLoaded = useSelector((state) => state.posts.initialPostsLoaded);\n    let loadingMore = useSelector((state) => state.posts.loadingMore);\n    let [time, setTime] = useState(dayjs());\n\n    useEffect(() => {\n        dispatch(getInitialPosts());\n        dispatch(getSavedLikes());\n    }, []);\n\n    useEffect(() => {\n        let interval = setInterval(() => {\n            setTime(dayjs());\n        }, 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    async function loadMore() {\n        dispatch(getMorePosts());\n    }\n\n    return (\n        <Container fluid>\n            <header>\n                <h1 className=\"title\">NASA DAILY BRIEF</h1>\n                <h1 className=\"time\">\n                    {time.format('h:mm:ss')}\n                    {/* <span className=\"hms\">{time.format('h')}</span>\n                    <span className='colon'>:</span>\n                    <span className=\"hms\">{time.format('mm')}</span>\n                    <span className='colon'>:</span>\n                    <span className=\"hms\">{time.format('ss')}</span> */}\n                </h1>\n            </header>\n            <main>\n                {!initialPostsLoaded && (\n                    <i className=\"fas fa-atom fa-spin loading-icon\"></i>\n                )}\n                {initialPostsLoaded &&\n                    posts.map((post) => {\n                        return <Post key={post.date} post={post} />;\n                    })}\n                {initialPostsLoaded && (\n                    <Button className=\"load-more-button\" onClick={loadMore}>\n                        {loadingMore ? 'Loading...' : 'Load More'}\n                    </Button>\n                )}\n            </main>\n            {initialPostsLoaded && (\n                <footer>Content Courtesy of NASA APOD API • Copyright 2021 James Bakker</footer>\n            )}\n        </Container>\n    );\n}\n","const initialState = {}\n\nexport default function likeReducer(state = initialState, action){\n    switch(action.type){\n        case 'LIKES/LIKE':\n            return {...state, [action.payload]: true};\n        case 'LIKES/UNLIKE':\n            return {...state, [action.payload]: false};\n        case 'LIKES/SET':\n            return {...action.payload}\n        default:\n            return {...state };\n    }\n}","import dayjs from 'dayjs';\n\nconst initialState = { \n    startDate: dayjs().subtract(4, 'day'), \n    initialPostsLoaded: false,\n    loadingMore: false,\n    data: [] \n};\n\nexport default function postsReducer(state = initialState, action) {\n    switch (action.type) {\n        case 'POSTS/INSERT':\n            return {...state, data: [...state.data, ...action.payload]};\n        case 'POSTS/SET_LOADED':\n            return {...state, initialPostsLoaded: true}\n        case 'POSTS/SET_MORE_LOADED':\n            return {...state, loadingMore: false}\n        case 'POSTS/SET_LOADING_MORE':\n            return {...state, loadingMore: true}\n        case 'POSTS/SET_START_DATE':\n            return {...state, startDate: action.payload}\n        default:\n            return {...state};\n    }\n}","import {combineReducers} from 'redux'\nimport likeReducer from '../like_button/state/LikeReducer'\nimport postsReducer from '../posts/state/PostsReducer'\n\n\nconst rootReducer = combineReducers({\n    likes: likeReducer,\n    posts: postsReducer\n})\n\nexport default rootReducer","import { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './RootReducer.js';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst middleWare = compose(applyMiddleware(thunk));\n\nconst store = createStore(rootReducer, composeWithDevTools(middleWare));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport { Provider } from 'react-redux'\nimport store from './state/store.js'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}