{"version":3,"sources":["components/like_button/LikeButton.jsx","components/like_button/state/LikeActions.js","components/posts/Post.jsx","components/clock/Clock.jsx","components/App.jsx","components/like_button/state/LikeReducer.js","components/common/state/RootReducer.js","components/common/state/store.js","index.js"],"names":["LikeButton","props","dispatch","useDispatch","date","liked","useSelector","state","likes","className","onClick","payload","getState","a","type","localStorage","setItem","JSON","stringify","unLike","title","PhotoCard","post","useState","visible","setVisible","expanded","setExpanded","toggleExpanded","partialVisibility","onChange","isVisible","Row","Col","xs","md","dayjs","format","maxDelay","delayMap","at","delay","typing","fixed","_","truncate","explanation","length","separator","omission","href","style","display","src","thumbnail_url","url","alt","copyright","hdurl","rel","target","Clock","time","setTime","useEffect","interval","setInterval","clearInterval","App","posts","useInfiniteQuery","pageParam","axios","get","data","nextId","previousId","getPreviousPageParam","firstPage","getNextPageParam","lastPage","Container","fluid","isFetched","pages","map","page","hasNextPage","Button","fetchNextPage","isFetchingNextPage","initialState","rootReducer","combineReducers","action","middleWare","compose","applyMiddleware","thunk","store","createStore","composeWithDevTools","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.ffef18ba.chunk.js","sourcesContent":["import { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport './LikeButton.scss';\nimport { like, unLike } from './state/LikeActions';\n\nexport default function LikeButton(props) {\n    let dispatch = useDispatch();\n    let { date } = props;\n    let liked = useSelector((state) => state.likes[date]);\n\n    function toggleLiked() {\n        if (!liked) dispatch(like(date));\n        else dispatch(unLike(date));\n    }\n    return (\n        <div className=\"like-btn-container\">\n            <button\n                aria-label={(liked ? 'un-like' : 'like')}\n                className={'like-button ' + (liked ? 'liked' : 'not-liked')}\n                onClick={toggleLiked}>\n                <i aria-hidden='true' title={(liked ? 'un-like this post' : 'like this post')}className=\"fas fa-heart\"></i>\n            </button>\n        </div>\n    );\n}\n","export const like = (payload) => {\n    return async (dispatch, getState) => {\n        dispatch({\n            type: 'LIKES/LIKE',\n            payload: payload,\n        });\n        let likes = getState().likes;\n        localStorage.setItem('likes', JSON.stringify({ ...likes, [payload]: true }));\n    };\n};\n\nexport const unLike = (payload) => {\n    return async (dispatch, getState) => {\n        dispatch({\n            type: 'LIKES/UNLIKE',\n            payload: payload,\n        });\n        let likes = getState().likes;\n        localStorage.setItem('likes', JSON.stringify({ ...likes, [payload]: false }));\n    };\n};\n\nexport const getSavedLikes = () => {\n    return async (dispatch, getState) => {\n        try {\n            let savedLikes = JSON.parse(localStorage.getItem('likes'));\n            console.log(savedLikes);\n            dispatch({\n                type: 'LIKES/SET',\n                payload: savedLikes,\n            });\n        } catch (error) {\n            console.log(error);\n        }\n    };\n};\n","import { useState } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport TypeWriter from 'react-typewriter';\nimport VisibilitySensor from 'react-visibility-sensor';\nimport dayjs from 'dayjs';\nimport LikeButton from '../like_button/LikeButton';\nimport './Post.scss';\nimport _ from 'lodash';\n\nexport default function PhotoCard(props) {\n    let { post } = props;\n    let [visible, setVisible] = useState(false);\n    let [expanded, setExpanded] = useState(false);\n\n    const visibilityChangeHandler = (isVisible) => {\n        if (visible) return;\n        setVisible(isVisible);\n    };\n    const toggleExpanded = () => {\n        setExpanded(!expanded);\n    };\n\n    return (\n        <VisibilitySensor partialVisibility onChange={visibilityChangeHandler}>\n            <div className=\"image-container\">\n                <LikeButton date={post.date} />\n                <Row>\n                    <Col xs={12} md={4} className=\"text-container\">\n                        <h5>\n                            <em>{dayjs(post.date).format('MMMM DD, YYYY')}</em>\n                        </h5>\n                        {visible && !expanded && (\n                            <TypeWriter\n                                maxDelay={40}\n                                delayMap={[{ at: /(\\.)/, delay: 300 }]}\n                                typing={1}\n                                fixed={true}>\n                                <span>\n                                    {_.truncate(post.explanation, {\n                                        length: 350,\n                                        separator: ' ',\n                                        omission: ' ',\n                                    })}\n                                    <button className=\"link\" onClick={toggleExpanded} href=\"#\">\n                                        ...Read More\n                                    </button>\n                                </span>\n                            </TypeWriter>\n                        )}\n                        {visible && expanded && (\n                            <span>\n                                {post.explanation}{' '}\n                                <button className=\"link\" onClick={toggleExpanded} href=\"#\">\n                                    ...Show Less\n                                </button>\n                            </span>\n                        )}\n                    </Col>\n                    <Col xs={12} md={8}>\n                        <img\n                            style={{ display: 'inline' }}\n                            src={post.thumbnail_url || post.url}\n                            alt={post.title}\n                        />\n                        <small>\n                            {post.copyright && `image copyright ${post.copyright} `}\n                            {post.copyright && post.hdurl && (\n                                <a href={post.hdurl} rel=\"noreferrer\" target=\"_blank\">\n                                    full size image\n                                </a>\n                            )}\n                        </small>\n                    </Col>\n                </Row>\n            </div>\n        </VisibilitySensor>\n    );\n}\n","import React from 'react'\nimport { useState, useEffect } from 'react';\nimport dayjs from 'dayjs';\n\nexport default function Clock(){\n\n    let [time, setTime] = useState(dayjs());\n\n    useEffect(() => {\n        let interval = setInterval(() => {\n            setTime(dayjs());\n        }, 1000);\n        return () => {\n            clearInterval(interval);\n        };\n    });\n\n    return (\n        <h1 className=\"time\">{time.format('h:mm:ss')}</h1>\n    )\n}","import Container from 'react-bootstrap/Container';\nimport 'components/main.scss';\nimport Button from 'react-bootstrap/Button';\nimport Post from 'components/posts/Post';\nimport { useInfiniteQuery } from 'react-query';\nimport axios from 'axios';\nimport Clock from 'components/clock/Clock';\n\nexport default function App() {\n    let startingPage = 0;\n    let posts = useInfiniteQuery(\n        'posts',\n        async ({ pageParam = startingPage }) => {\n            let { data } = await axios.get(`/posts/?page=${pageParam}`);\n            data.nextId = pageParam + 1;\n            data.previousId = pageParam > 0 ? pageParam - 1 : null;\n            return data;\n        },\n        {\n            getPreviousPageParam: (firstPage) => firstPage.previousId ?? false,\n            getNextPageParam: (lastPage) => lastPage.nextId ?? false,\n        }\n    );\n    \n    return (\n        <Container fluid>\n            <header>\n                <h1 className=\"title\">NASA DAILY BRIEF</h1>\n                <Clock/>\n            </header>\n            <main>\n                {!posts.isFetched && <i className=\"fas fa-atom fa-spin loading-icon\"></i>}\n                {posts.isFetched &&\n                    posts.data.pages.map((page) => {\n                        return page.map((post) => {\n                            return <Post key={post.date} post={post} />;\n                        });\n                    })}\n\n                {posts.isFetched && posts.hasNextPage &&(\n                    <Button\n                        className=\"load-more-button\"\n                        onClick={() => {\n                            posts.fetchNextPage();\n                        }}>\n                        {posts.isFetchingNextPage ? 'Loading...' : 'Load More'}\n                    </Button>\n                )}\n            </main>\n            {posts.isFetched && (\n                <footer>Content Courtesy of NASA APOD API • Copyright 2021 James Bakker</footer>\n            )}\n        </Container>\n    );\n}\n","const initialState = {}\n\nexport default function likeReducer(state = initialState, action){\n    switch(action.type){\n        case 'LIKES/LIKE':\n            return {...state, [action.payload]: true};\n        case 'LIKES/UNLIKE':\n            return {...state, [action.payload]: false};\n        case 'LIKES/SET':\n            return {...action.payload}\n        default:\n            return {...state };\n    }\n}","import {combineReducers} from 'redux'\nimport likeReducer from 'components/like_button/state/LikeReducer'\n\n\nconst rootReducer = combineReducers({\n    likes: likeReducer,\n})\n\nexport default rootReducer","import { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './RootReducer.js';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst middleWare = compose(applyMiddleware(thunk));\n\nconst store = createStore(rootReducer, composeWithDevTools(middleWare));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App.jsx';\nimport { Provider } from 'react-redux';\nimport store from 'components/common/state/store.js';\nimport { QueryClientProvider, QueryClient } from 'react-query';\n\n\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <QueryClientProvider client={queryClient}>\n                <App />\n            </QueryClientProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}